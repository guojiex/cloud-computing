package com.cloudcomputing.samza.pitt_cabs;

import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.util.HashMap;

import org.apache.samza.config.Config;
import org.apache.samza.storage.kv.KeyValueIterator;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.IncomingMessageEnvelope;
import org.apache.samza.system.OutgoingMessageEnvelope;
import org.apache.samza.task.InitableTask;
import org.apache.samza.task.MessageCollector;
import org.apache.samza.task.StreamTask;
import org.apache.samza.task.TaskContext;
import org.apache.samza.task.TaskCoordinator;
import org.apache.samza.task.WindowableTask;

import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.SerializationConfig;

import com.cloudcomputing.samza.pitt_cabs.model.ClientInformation;
import com.cloudcomputing.samza.pitt_cabs.model.DriverInformation;
import com.cloudcomputing.samza.pitt_cabs.model.DriverLocation;
import com.cloudcomputing.samza.pitt_cabs.model.EventClass;
import com.cloudcomputing.samza.pitt_cabs.model.MatchResult;

/**
 * Consumes the stream of driver location updates and rider cab requests.
 * Outputs a stream which joins these 2 streams and gives a stream of rider to
 * driver matches.
 */
public class DriverMatchTask implements StreamTask, InitableTask, WindowableTask {

    /* Define per task state here. (kv stores etc) */
    private KeyValueStore<String, Set<String>> blockDriverMap;
    private KeyValueStore<String, Map<String, Object>> driversInformation;

    @Override
    @SuppressWarnings("unchecked")
    public void init(Config config, TaskContext context) throws Exception {
        // Initialize stuff (maybe the kv stores?)
        blockDriverMap = (KeyValueStore<String, Set<String>>) context.getStore("block-driver");
        driversInformation = (KeyValueStore<String, Map<String, Object>>) context.getStore("driver-list");
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public void process(IncomingMessageEnvelope envelope, MessageCollector collector, TaskCoordinator coordinator) {
        // The main part of your code. Remember that all the messages for a
        // particular partition
        // come here (somewhat like MapReduce). So for task 1 messages for a
        // blockId will arrive
        // at one task only, thereby enabling you to do stateful stream
        // processing.
        String incomingStream = envelope.getSystemStreamPartition().getStream();
        if (incomingStream.equals(DriverMatchConfig.DRIVER_LOC_STREAM.getStream())) {
            this.processDriverLocationEvent((Map<String, Object>) envelope.getMessage());
        } else if (incomingStream.equals(DriverMatchConfig.EVENT_STREAM.getStream())) {
            this.processEventEvent((Map<String, Object>) envelope.getMessage(), collector);
        } else {
            throw new IllegalStateException("Unexpected input stream: " + envelope.getSystemStreamPartition());
        }
    }

    private void processEventEvent(Map<String, Object> message, MessageCollector collector) {
        switch((String)message.get("type")){
        case "LEAVING_BLOCK":
            String blockId = String.valueOf((int) message.get("blockId"));
            String driverId = String.valueOf((int) message.get("driverId"));
            String status = (String) message.get("status");
            Map<String, Object> drivers = driversInformation.get(blockId);
            if(drivers==null){
                return;
            }
            if(status.equals("AVAILABLE")){
                drivers.remove(driverId);
            }
            driversInformation.put(blockId, drivers);
            break;
        case "ENTERING_BLOCK":
            this.processEnteringBlock(message);
            break;
        case "RIDE_REQUEST":
            this.processRideRequest(message, collector);;
            break;
        case "RIDE_COMPLETE":
            blockId = String.valueOf((int) message.get("blockId"));
            driverId = String.valueOf((int) message.get("driverId"));
            int latitude = (int) message.get("latitude");
            int longitude = (int) message.get("longitude");
            String gender=(String) message.get("gender");
            double rating=(double) message.get("rating");
            int salary=(int) message.get("salary");
            drivers = driversInformation.get(blockId);
            if(drivers==null){
                driversInformation.put(blockId, new HashMap<String,Object>());     
                drivers=driversInformation.get(blockId);
            }
            drivers.put(driverId, String.format("%d:%d:%s:%f:%d", latitude,longitude,gender,rating,salary));
            driversInformation.put(blockId, drivers);
            break;
        }
    }
    
    private void processRideRequest(Map<String, Object> message, MessageCollector collector){
        String clientId=String.valueOf((int)message.get("clientId"));
        String blockId=String.valueOf((int)message.get("blockId"));
        int latitude = (int) message.get("latitude");
        int longitude = (int) message.get("longitude");
        String gender_preference=(String) message.get("gender_preference");
        
        Map<String,Object> client=new HashMap<>();
        client.put("clientId", clientId);
        client.put("blockId", blockId);
        client.put("latitude", latitude);
        client.put("longitude", longitude);
        client.put("gender_preference", gender_preference);
        int driverId=this.findAMatchForUser(client);
        if(driverId==-1)
            return;
        Map<String, Object> matchMessage = new HashMap<String, Object>();
        matchMessage.put("driverId", driverId);
        matchMessage.put("clientId", Integer.parseInt(clientId));
        collector.send(new OutgoingMessageEnvelope(DriverMatchConfig.MATCH_STREAM, matchMessage));
    }
    private void processEnteringBlock(Map<String, Object> message){
        String blockId = String.valueOf((int) message.get("blockId"));
        String driverId = String.valueOf((int) message.get("driverId"));
        String status = (String) message.get("status");
        if(!status.equals("AVALIABLE")){
            return;
        }
        int latitude = (int) message.get("latitude");
        int longitude = (int) message.get("longitude");
        String gender=(String) message.get("gender");
        double rating=(double) message.get("rating");
        int salary=(int) message.get("salary");
        Map<String, Object> drivers = driversInformation.get(blockId);
        if(drivers==null){
            driversInformation.put(blockId, new HashMap<String,Object>());     
            drivers=driversInformation.get(blockId);
        }
        drivers.put(driverId, String.format("%d:%d:%s:%f:%d", latitude,longitude,gender,rating,salary));
        
        driversInformation.put(blockId, drivers);
//        System.out.println(driversInformation.get(blockId).get(driverId));
    }
    private static final int MAX_DIST = 5000;

    private double getClientDriverDistance(int driverId, Map<String, Object> client) {
        String[] parts=((String)this.driversInformation.get((String) client.get("blockId")).get(String.valueOf(driverId))).split(":");
        int driverLongitude=Integer.parseInt(parts[0]);
        int driverLatitude=Integer.parseInt(parts[1]);
        //int driverLongitude=(int) this.driversInformation.get(String.valueOf(driverId)).get("longitude");
        //int driverLatitude=(int) this.driversInformation.get(String.valueOf(driverId)).get("latitude");
        return Math.sqrt(
                Math.pow(2, driverLongitude - ((int)client.get("longitude"))) + 
                Math.pow(2, driverLatitude - ((int)client.get("latitude"))));
    }

    private int findAMatchForUser(Map<String, Object> client) {

        Map<String,Object> drivers=this.driversInformation.get((String) client.get("blockId"));
        if(drivers==null)
            return -1;
        double highest = Double.MIN_NORMAL;
        int driverIdWithHighestScore = -1;
        for(String driverId:drivers.keySet()){
            String[] parts=((String)drivers.get(driverId)).split(":");
            String gender=parts[2];
            double rating=Double.parseDouble(parts[3]);
            int salary=Integer.parseInt(parts[4]);
            
            double client_driver_distance = this.getClientDriverDistance(
                    Integer.parseInt(driverId), client);
            double distance_score = 1 - (client_driver_distance) / MAX_DIST;
            double gender_score = 0;
            if (((String)(client.get("gender_preference"))).equals("N"))
                gender_score = 1;
            else if (((String)(client.get("gender_preference"))).equals(gender))
                gender_score = 1;
            double rating_score =rating / 5.0;
            double salary_score = 1 - salary / 100.0;
            double match_score = distance_score * 0.4 + gender_score * 0.2 + rating_score * 0.2 + salary_score * 0.2;
            if (match_score > highest) {
                driverIdWithHighestScore = Integer.parseInt(driverId);
            }
        }
        return driverIdWithHighestScore;
    }

    private void processDriverLocationEvent(Map<String, Object> message) {
        String blockId = String.valueOf((int) message.get("blockId"));
        String driverId = String.valueOf((int) message.get("driverId"));
        if(this.blockDriverMap.get(blockId)==null){
            return;
        }
        if(this.driversInformation.get(driverId)!=null){
            Map<String,Object> driver=this.driversInformation.get(driverId);
            driver.put("latitude", (int) message.get("latitude"));
            driver.put("longitude", (int) message.get("longitude"));
        }
    }

    @Override
    public void window(MessageCollector collector, TaskCoordinator coordinator) {
        // this function is called at regular intervals, not required for this
        // project
    }
}

